@namespace DotNaut.Data.Sql
@using System.Reflection
@using System.Text
@inherits DotNaut.Data.Sql.SqlObject

DROP PROCEDURE IF EXISTS
@FullName
GO

CREATE PROCEDURE @FullName
@FormatArguments(Request.GetProperties())
AS
SET NOCOUNT ON

@ChildContent

RETURN 0
GO

@if (Grants != null)
{
    @foreach (var grant in Grants)
    {
        @* TODO:A dedicated component for grant*@
        <text>GRANT EXECUTE ON @FullName TO @grant@(EOL)</text>
        <text>GO@(EOL)@(EOL)</text>
    }
}

@code {
    [Parameter]
    public Type? Request { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string[]? Grants { get; set; }

    public string FormatList<T>(IEnumerable<T> list, Func<T, string> format, string delimiter)
    {
        var builder = new StringBuilder();
        var notFirst = false;

        foreach (var item in list)
        {
            if (notFirst)
            {
                builder.Append(delimiter);
            }
            else
            {
                notFirst = true;
            }

            builder.Append(format(item));
        }

        return builder.ToString();
    }

    public string FormatArguments(IEnumerable<PropertyInfo> properties) => FormatList(
        properties,
        item => $"\t@{item.Name} {item.PropertyType.Name}",
        $",{EOL}"
    );
}
