@using Microsoft.AspNetCore.Components

@namespace DotNaut.Content
@typeparam TItem


@{
    var parentType = Parent.GetType();
    var list = parentType
        .Assembly
        .GetTypes()
        .Where(type => type.FullName.StartsWith($"{parentType.Namespace}."))
        .Where(type => typeof(TItem).IsAssignableFrom(type))
        .Select(type => (
            Item: (TItem)Activator.CreateInstance(type),
            Route: type.GetCustomAttributes(false).OfType<RouteAttribute>().FirstOrDefault()
        ))
    ;

    if (Comparer != null)
    {
        list = list.OrderBy(item => item.Item, Comparer!);
    }
}

<ul>
    @foreach (var item in list)
    {
        <li>
            @Prefix?.Invoke(item.Item)

            <a href=@item.Route?.Template>
                @((item.Item as DotNaut.Ontology.INamed).Get())
            </a>

            @Suffix?.Invoke(item.Item)
        </li>
    }
</ul>

@code {
    [Parameter]
    public ComponentBase Parent { get; set; }

    [Parameter]
    public IComparer<TItem>? Comparer { get; set; }

    [Parameter]
    public RenderFragment<TItem>? Prefix { get; set; }

    [Parameter]
    public RenderFragment<TItem>? Suffix { get; set; }
}
